---
  - name: Create a new VM
    vars_files:
      - "/etc/ansible-secure/vault.yaml"
    hosts: "{{ vault_proxmoxsvr }}"
    become: true
    gather_facts: no
    vars:
      - ostype: l26
      - iso: "--cdrom {{ vault_isodeb11 }}"
      - config_cdrom: false
      - cores:  1
      - sockets: 1
      - memory: 512
      - net0: "e1000,bridge={{ vault_proxbridge }},firewall=1"
      - bootdisk: scsi0
      - scsihw:   virtio-scsi-pci
      - hdsize: 10
      - scsi0: "file=proxmox-storage:{{ hdsize }}"
      - cdrom: "{{ (config_cdrom | ternary( iso, '' )) }}"
      - passhash: "{{ vault_pxerootpass_encrypted }}"

    vars_prompt:
      - name: hostname
        prompt: What is the name of the new host?
        private: no
        confirm: yes

    tasks:
      - name: Create full hostname
        set_fact:
          hostname_full: "{{ hostname }}.{{ vault_domain }}"

      - name: Fetch list of proxmox vms
        shell: >
          set pipefail -o && \
            qm list | sed "s/\s\+/ /g" | tail -n +2 | cut -d " " -f 3
        args:
          executable: /bin/bash
        register: qm_output
        changed_when: false

      - name: Verify new VM's name does not already exist
        assert:
          that: "'{{ hostname }}' not in {{ qm_output.stdout_lines }}"

        # Ansible galaxy has a plugin for proxmox, but cannot be used since it can only create new VMs from templates
      - name: Create new VM
        shell: "qm create `pvesh get /cluster/nextid` --name {{ hostname }} {{ cdrom }} --numa 0 --ostype {{ ostype }} --cpu cputype=host --cores {{ cores }} --sockets {{ sockets }} --memory {{ memory }} --net0 {{ net0 }} --bootdisk {{ bootdisk }} --scsihw {{ scsihw }} --scsi0 {{ scsi0 }} --agent enabled=1 --onboot 1 --start 0"
        register: qmcreate
        changed_when: qmcreate.stdout is regex("Logical volume \"vm-.*-disk-?? created.\"")
        # Output example:  Logical volume "vm-107-disk-0" created.

      - name: Remove VM name from known hosts, if exists
        name: "{{ hostname }}"
          state: absent

      - name: Remove the other possible hostname, if exists
        name: "{{ hostname_full }}"
          state: absent

      - name: Get VMID for VM we just created
        shell: >
          set pipefail -o && qm list | grep -i '^\s\+[0-9]\+\s\+{{ hostname }}\+\s' | sed 's/\s\+/ /g' | cut -d " " -f 2
        args:
          executable: /bin/bash
        register: vmid
        changed_when: false

      - name: Verify that we have a proper vmid
        assert:
          that: vmid.stdout|int > 99

      - name: Get mac address
        shell: >
          set pipefail -o && \
            qm config "{{ vmid.stdout }}" | grep net0 | grep -o -E '[0-F]{2}:[0-F]{2}:[0-F]{2}:[0-F]{2}:[0-F]{2}:[0-F]{2}' | sed 's/:/-/g' | tr [:upper:] [:lower:]
        args:
          executable: /bin/bash
        register: mac_raw
        changed_when: false

      - name: Saving mac address & filenames
        set_fact:
          mac_addr:            "{{ mac_raw.stdout }}"
          preseed_file:        "debian/01-{{ mac_raw.stdout }}.txt"
          preseed_file_dest:   "/srv/tftp/debian/01-{{ mac_raw.stdout }}.txt"
          pxeconfig_file:      "01-{{ mac_raw.stdout }}"
          pxeconfig_file_dest: "/srv/tftp/pxelinux.cfg/01-{{ mac_raw.stdout }}"

      - name: Print mac address
        debug:
          msg: "MAC address is '{{ mac_addr }}'"

      - name: Creating preseed file
        local_action:
          module: template
          src:  /etc/ansible-secure/pxe/preseed.txt.js
          dest: "{{ preseed_file_dest }}"
          owner: root
          group: root
          mode: '0644'

      - name: Create pxeboot file
        local_action:
          module: template
          src:  /etc/ansible-secure/pxe/default.js
          dest: "/srv/tftp/pxelinux.cfg/01-{{ mac_addr }}"
          owner: root
          group: root
          mode: '0644'

      - name: Start VM
        shell: qm start "{{ vmid.stdout }}"
        retries: 5
        delay: 60

      - name: Wait until new host comes up
        wait_for:
          host: "{{ hostname_full }}"
          port: 22
          delay: 60
          timeout: 600

      - name: Clean up default file
        local_action:
          module: file
          path: "{{ preseed_file_dest }}"
          state: absent

      - name: Clean up pxe file
        local_action:
          module: file
          path:  "{{ pxeconfig_file_dest }}"
          state: absent

      - name: Add to inventory
        local_action:
          module: add_host
          hostname: "{{ hostname_full }}"
          groups:   "new_vm"

  - name: Configure target server for LDAP & automation
    hosts: "{{ hostvars[vault_proxmoxsvr]['hostname_full'] }}"
    vars_files:
      - "/etc/ansible-secure/vault.yaml"
    # We need to connect as the initial setup user and su to root, 
    #   since nothing is setup
    remote_user:   "{{ vault_init_user }}"
    become_method: su
    become_user: root
    become_flags: '-s /bin/sh'
    become: true
    gather_facts: yes
    vars:
      - defaultusers: "{{ vault_defaultusers }}"
      - ldap_password: "{{ vault_ldappassword }}"
      - ansible_ssh_pass: "{{ vault_init_password }}"
      - ansible_become_password: "{{ vault_root_password }}"

    tasks:
      - name: Wait for new VM to come up
        wait_for_connection:
          timeout: 1200

      - name: Include OS-specific configuration
        include_vars: "proxmox_vm_create_include/_vars_{{ ansible_facts['os_family'] }}.yaml"

      - name: Setup needed packages
        include_tasks: "proxmox_vm_create_include/_packages_{{ ansible_facts['os_family'] }}.yaml"

      - name: Setup LDAP
        include_tasks: "proxmox_vm_create_include/_ldap_{{ ansible_facts['os_family'] }}.yaml"

      - name: Setup sudo
        include_tasks: "proxmox_vm_create_include/_sudo.yaml"

      - name: Create home directories for certain users
        shell:
          cmd: 'su {{ item }} -c exit'
        loop:
          "{{ defaultusers }}"

      - name: Create the .ssh directories for certain users
        file:
          path: "/home/{{ item }}/.ssh"
          state: directory
          force: no
          owner: "{{ item }}"
          group: "{{ item }}"
          mode: 0700
        loop:
          "{{ defaultusers }}"

      - name: Copy ssh keys over for each user if they don't exist
        copy:
          src:  "/etc/ansible-secure/home/{{ item }}/authorized_keys"
          dest: "/home/{{ item }}/.ssh/authorized_keys"
          force: no
          owner: "{{ item }}"
          group: "{{ item }}"
          mode: 0600
        loop:
          "{{ defaultusers }}"
